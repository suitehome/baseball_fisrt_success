`timescale 1ns / 1ps
module set_number(input wire clk,rst,enter,
                  input wire guess_mode,
                  input wire [2:0] input_sig,
                  input wire [7:0]scancode,
                  input wire [23:0] input_num,
                  input wire [3:0] check_cnt,
                  input wire check,     
                  input wire [1:0]success,
                  output wire [3:0]cs_out,             
                  output wire [1:0]winner,
                 
                  output reg cycle
                  
    );  
    
    
    wire write_en;

    reg [23:0] current_num,num_s,num_d;
    wire wren_L2H;
    wire enteron;
    
    reg cnt;
    reg whowin;
    

    reg [3:0]cs, next_state;
    reg enteron_s;
    reg enteron_d;

    assign cs_out = cs;
  

    localparam S0 = 4'b0000, S1 = 4'b0001, S2 = 4'b0010, S3 = 4'b0011, S4 = 4'b0100, S5 = 4'b0101, S6 = 4'b0110, S7 = 4'b0111;
  /*
    always@(posedge clk)
        if(rst) begin 
            enteron_d <= 0;
            enteron_s <= 0;
            end 
        else begin
            enteron_d <= enteron;
            enteron_s <= enteron_d;
            end 
            
            
            */
   always@(posedge clk, posedge rst)       
        if(rst)
           cs <= S0;
         else 
           cs <= next_state;
           
   
   
   always @*
    case (cs)
    S0: if(input_sig == 1 && guess_mode == 0) next_state = S1; else next_state = S0;
    S1: if(input_sig == 2 && guess_mode == 0) next_state = S2; else next_state = S1;
    S2: if(input_sig == 1 && guess_mode == 1) next_state = S3; else next_state = S2;
    S3: if(input_sig == 1 && guess_mode == 1) next_state = S3;
        else if(success=='d1) next_state = S4; 
        else next_state = S5;
    S4: next_state = S4; //PLAYER 1 win
    S5: if(input_sig == 2 && guess_mode == 1) 
            next_state = S6;
        else 
            next_state = S5;
    S6: if(success=='d2) next_state = S7; 
        else next_state = S3;
    S7: next_state = S6;        //PLAYER 2 win
    default: next_state = S0;   
    endcase
   
   assign winner = (cs == S4) + (cs == S7)*2;
   
   
   
   
   
   
   
           
 /*          
   always@*
        case(cs)
            S0: if(wren_L2H) begin 
                    num_p1 = input_num;
                    next_state = S1;
                    end
            S1: if(wren_L2H) begin 
                    num_p2 = input_num;
                    next_state = S2;
                    end
            S2: if((wren_L2H)&&(num_p2 == input_num))begin  //p1 guess p2's number
                        next_state = S4;
                        whowin = 0;
                        end
                else if((wren_L2H) && ~(num_p2==input_num)) begin
                        next_state = S3;
                      
                        end 
                else 
                    next_state = S2;
            
             S3: if((wren_L2H)&&(num_p1== input_num)) begin //p1 guess p2's number
                        next_state = S4;
                        whowin = 1;
                        end
                else if((wren_L2H) && ~(num_p2==input_num)) begin 
                        next_state = S2;
                        
                        end
                else 
                    next_state = S3; 
                    
            S4: if(whowin == 0)
                     winner = 2'b01; //winner = 1p
                 else 
                    winner = 2'b10;
            
        
            default: next_state = S0;
       
            endcase 
       */

       
       

endmodule






///////////////////////////////////


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/12/05 15:46:01
// Design Name: 
// Module Name: datapath
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module datapath(
                  input wire rst,
                  input wire [2:0]input_sig,
                  input wire guess_mode,
                  input wire [31:0] input_number,
                  input wire cycle,
                  output wire [1:0]success,
                  output wire check,
                  output wire  [23:0] output_number,
                  
                  output wire [3:0] check_cnt,
                  output  reg [23:0]num_p1,num_p2,
                  output  reg [23:0]guess_num_p1, guess_num_p2,
                  output wire [1:0]strike1,
                  output wire [1:0] ball1,
                  output wire [1:0]strike2,
                  output wire [1:0] ball2
    );

  
            
        
    always@(input_sig, input_number) 
        case(input_sig)
            3'b001: begin 
                if(guess_mode == 0)
                    num_p1[23:0] = input_number[23:0]; 
                 else 
                    guess_num_p1[23:0] = input_number[23:0];
                 end
            3'b010: begin
                 if(guess_mode == 0)
                    num_p2[23:0] = input_number[23:0];
                 else 
                    guess_num_p2[23:0] = input_number[23:0];
                end 
        endcase
    
   assign  success = guess_mode? (2*(num_p1 == guess_num_p2) + (num_p2 == guess_num_p1)) : 0;
   
   
    assign strike1 = guess_mode?((guess_num_p1[7:0] == num_p2[7:0])  + 
    (guess_num_p1[15:8] == num_p2[15:8]) +(guess_num_p1[23:16] == num_p2[23:16])):0; 
    assign ball1 = guess_mode?((guess_num_p1[7:0] == num_p2[15:8]) + (guess_num_p1[7:0] == num_p2[23:16]) 
                    + (guess_num_p1[15:8] == num_p2[7:0]) + (guess_num_p1[15:8] == num_p2[23:16]) +
                    (guess_num_p1[23:16] == num_p2[7:0]) + (guess_num_p1[23:16] == num_p2[15:8])):0;
   
   
    assign strike2 = guess_mode?((guess_num_p2[7:0] == num_p1[7:0])  + 
    (guess_num_p2[15:8] == num_p1[15:8]) +(guess_num_p2[23:16] == num_p1[23:16])):0; 
    assign ball2 = guess_mode?((guess_num_p2[7:0] == num_p1[15:8]) + (guess_num_p2[7:0] == num_p1[23:16]) 
                    + (guess_num_p2[15:8] == num_p1[7:0]) + (guess_num_p2[15:8] == num_p1[23:16]) +
                    (guess_num_p2[23:16] == num_p1[7:0]) + (guess_num_p2[23:16] == num_p1[15:8])):0;
    
    /*
    reg [3:0]check_cnt_reg;
    assign check_cnt = check_cnt_reg;
    //check when 3number + enter is stored
    assign check = input_number[7:0]=='h0d && ~(input_number[15:8] == 'h0d) 
                   && ~(input_number[23:16] == 'h0d) && ~(input_number[31:24] == 'h0d);
                   
    assign output_number = input_number[31:8];   //transmit 3 number without enter key
    
    always@(posedge check, posedge rst )    //check count 
        if(rst)
             check_cnt_reg  = 0; 
        else if(cycle == 1)
            check_cnt_reg = check_cnt_reg-2;
           
        else 
            check_cnt_reg = check_cnt_reg +1;
            */ 
    
  
endmodule
///////////////////////////

밑에 있는 이게  탑모듈 !!!!!!!!!!!


`timescale 1ns / 1ps



module ps2_example (
	input         clk,
	input         rst,
	input         ps2clk,
	input         ps2data,
	input         set_num1,set_num2,guess_num1,guess_num2,
	input         SW0,SW1,
	output [6:0] sseg,
	
	output        ssDP,
	output [7:0] AN,
	output LED16_B,
	output LED16_G
	);
		
     wire [2:0] page;
  
     wire [23:0]guess_num_p1,guess_num_p2,num_p1,num_p2;
     wire [11:0] input_number;
     wire [8:0]t1,t2;
     wire [2:0]page_out;
     wire [31:0]keycode;
     wire [3:0] digit_check_copy;
     wire check;
     wire [23:0]output_number;
     wire [3:0] check_cnt;
     wire [1:0]winner;
     wire [7:0] scancode;
    wire err_ind;
    wire clk_50;
    wire clk_100;
    wire Released;
    wire [3:0]cs_out;
    wire cycle;
    wire enter;
    wire [1:0]success;
    wire sig_num1,sig_num2,sig_gnum1,sig_gnum2;
    wire [2:0]input_sig;
    wire guess_mode;
    wire [1:0] strike, ball, strike1,strike2,ball1,ball2;
    assign guess_mode = SW0;
     assign LED16_B = (winner==2'b01);// winner = 1
     assign LED16_G = (winner==2'b10) ; //winner = 2
    //assign success_result = success;
 
    //start start (.clk(clk), .rst(rst), .pageout(page));
assign input_sig = sig_num1+2*sig_num2+3*sig_gnum1+4*sig_gnum2;
assign enter =  sig_num1|sig_num2|sig_gnum1|sig_gnum2;   
assign strike = SW1? strike1: strike2;
assign ball = SW1? ball1 : ball2;
debounce_sync d1( .clk(clk), .ext_in(set_num1),  .sig (sig_num1));
debounce_sync d2( .clk(clk), .ext_in(set_num2),  .sig (sig_num2));
debounce_sync d3( .clk(clk), .ext_in(guess_num1),  .sig (sig_gnum1));
debounce_sync d4( .clk(clk), .ext_in(guess_num2),  .sig (sig_gnum2));


  
    set_number set_number(.clk(clk),.rst(rst),.enter(enter), .guess_mode(guess_mode),  .input_sig(input_sig),.scancode(scancode), .input_num(output_number),
     .check_cnt(check_cnt), .check(check), .success(success), .cs_out(cs_out), .winner(winner),.cycle(cycle));
    /*;
     controller u0(
    .clk(clk),.rst(rst),
    .input_number(input_number),
    .turn(turn),.turn_end(turn_end),
    .g_num1(g_num1),.g_num2(g_num2),.num_p1(num_p1),.num_p2(num_p2)
    );
    */
    datapath u1( .rst(rst),.input_sig(input_sig), .guess_mode(guess_mode),.input_number(keycode),.cycle(cycle), .success(success),
     .output_number(output_number), .check_cnt(check_cnt), .check(check),.guess_num_p1(guess_num_p1), 
     .guess_num_p2(guess_num_p2),.num_p1(num_p1),.num_p2(num_p2),.strike1(strike1), .strike2(strike2) 
     ,.ball1(ball1), .ball2(ball2)
    
    );





clk_wiz_0 clk_core
  (
  // Clock in ports
   .clk_in1(clk),      // input clk_in1
   // Clock out ports
   .clk_out1(clk_100),     // output clk_out1
   .clk_out2(clk_50),     // output clk_out2
   // Status and control signals
   .reset(rst), // input reset
   .locked()  );      // output locked

  
  
ps2_kbd_top ps2_kbd (
    .clk(clk_50), 
    .rst(rst), 
    .ps2clk(ps2clk), 
    .ps2data(ps2data), 
    .scancode(scancode), 
    .Released(Released), 
    .err_ind(err_ind),
    .keycode(keycode),
    
    .got_release(got_release)
    
    );
	 

	 
ss_drive ss_drive (
    .clk(clk_100), 
    .rst(rst), 
    .data7(cs_out), //{keycode[31],keycode[30],keycode[29],keycode[28]}
    .data6({2'b00,success}), 
    .data5({2'b00,strike}), 
    .data4({2'b00,ball}), 
    .data3(guess_num_p2[3:0]), 
    .data2(guess_num_p1[3:0]), //123 312
    
   
.data1(num_p2[3:0]), 
    .data0(num_p1[3:0]), 
    .mask(8'b1111_1111), 
    .ssA(sseg[0]), 
   .ssB(sseg[1]), 
   .ssC(sseg[2]), 
   .ssD(sseg[3]), 
   .ssE(sseg[4]), 
   .ssF(sseg[5]), 
   
.ssG(sseg[6]), 
    .ssDP(ssDP), 
    .AN7(AN[7]), 
    .AN6(AN[6]), 
    .AN5(AN[5]), 
    .AN4(AN[4]),
    .AN3(AN[3]), 
    .AN2(AN[2]), 
    .AN1(AN[1]), 
    .AN0(AN[0])
    );
endmodule

//////////////////////////

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2023/11/30 09:57:18
// Design Name: 
// Module Name: debounce_sync
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module debounce_sync(input wire clk, ext_in, output reg sig

    );
    reg t;
    
    always@(posedge clk)
    begin
    t <= ext_in;
    sig <= t;
    end
   
endmodule
///////////////////////////////////////////


`timescale 1ns / 1ps

module ps2_kbd_top(
    input clk,
    input rst,
    input ps2clk,
    input ps2data,
    output [7:0] scancode,
    output Released,
    output err_ind,
    output wire [31:0] keycode,
    output wire got_release
    );

wire req, released_out;
reg ack;



ps2_kbd_new ps2 (
    .clk(clk), 
    .rst(rst), 
    .ps2_clk(ps2clk), 
    .ps2_data(ps2data), 
    .scancode(scancode), 
    .read(ack), 
    .data_ready(req), 
    .released(released_out), 
    .err_ind(err_ind),
    .keycode(keycode),
    .got_release(got_release)
    );
	 
	 
	 
	 
debounce_pulse pulse (
    .clk(clk), 
    .rst(rst), 
    .Din(released_out), 
    .Dout(Released)
    );


always @(posedge clk, posedge rst)
	begin
		if(rst == 1'b1)
			ack <= 1'b0;
		else if(req == 1'b1)
			ack <= 1'b1;
		else
			ack <= 1'b0;
	end

endmodule
//////////////////////////////////////////////

`timescale 1ns / 1ps
//`default_nettype none

`define TIMER_120U_BIT_SIZE 13
`define FRAME_BIT_NUM 11

`define ready_st 'b0
`define ready_ack_st 'b1

`define RELEASE_CODE	'b11110000   // F0
`define EXTENDED_CODE 'b11100000    // E0
`define TIMER_120U_TERMINAL_VAL 6000

module ps2_kbd_new(
    input wire clk,
    input wire rst,
    input wire ps2_clk,
    input wire ps2_data,
	 input wire read,
    output reg [7:0] scancode,
    output wire data_ready,
    output reg released,
    output reg err_ind,
    output reg [32:0]keycode,
    output wire got_release
    );
	 
localparam S_H = 2'b00, S_L = 2'b01, S_L2H = 2'b11, S_H2L = 2'b10;

reg [1:0] st,nx_st;
reg [1:0] nx_st2,st2;

reg ps2_clk_d, ps2_clk_s, ps2_data_d, ps2_data_s;
wire ps2_clk_rising_edge, ps2_clk_falling_edge;
wire rst_timer, shift_done;
reg [`FRAME_BIT_NUM - 1 : 0] q;
wire shift;
reg [3:0] bit_cnt;
wire reset_bit_cnt;
wire timer_timeout;
reg [`TIMER_120U_BIT_SIZE-1:0] timer_cnt;

wire output_strobe;
reg hold_release;
wire extended;
reg hold_extended;
wire err;
reg parity_err,ss_bits_err;
reg p;
reg valid;
reg shift_flag;

// synchronizing asynchronous input signal from ps2 ports 
// ps2 port에서 오는 ps2clk과 ps2dataf 시스템 클락(clk)에 동기화 시켜주는단계
always  @(posedge rst,posedge clk) 
begin : sync_reg
	if(rst == 'b1)
		begin
			ps2_clk_d <= 'b1;
			ps2_data_d <= 'b1;
			ps2_clk_s<= 'b1;
			ps2_data_s <= 'b1;
		end
	else
		begin
			ps2_clk_d <= ps2_clk;
			ps2_data_d <= ps2_data;
			ps2_clk_s <= ps2_clk_d;
			ps2_data_s <= ps2_data_d;
		end
	end

// generate pulse signal of one clock period width that informs ps2clk is rising or falling
// ps2clk 의 rising_edge와 falling edge를 detect, falling edge 일 때 ps2data를 읽는다.
assign ps2_clk_rising_edge = !ps2_clk_s & ps2_clk_d;
assign ps2_clk_falling_edge = !ps2_clk_d & ps2_clk_s;

// 다음 두 always문은 ps2clk의 상태 변화 FSM이다.
// S_L은 ps2clk가 low, S_L2H는 ps2clk이 rising edge, S_H는 ps2clk이 high, S_H2L은 ps2clk이 falling edge인 상태이다.
// ps2clk는 평소에는 high에 있다가 키보드가 눌리면, ps2clk이 시작된다.
// ps2clk ----------------------___---___---___---___---___---___----___------------------
//                             * 키보드가 눌리는순간                       * 키보드를 놓는순간
always @(posedge clk) 
	begin : state_reg
		if(rst == 'b1)
			st <= S_H;
		else
			st <= nx_st;
	end
	
always @(*)
	begin
		(* FULL_CASE, PARALLEL_CASE *)
		case (st) 
			S_L : nx_st = (ps2_clk_rising_edge == 'b1) ? S_L2H : S_L;
			S_L2H : nx_st = S_H;
			S_H : nx_st = (ps2_clk_falling_edge == 'b1) ? S_H2L : S_H;
			S_H2L : nx_st = S_L;
			default : nx_st = S_H;						
		endcase
	end

// output signals for the state machine
assign shift = (st == S_H2L) ? 'b1 : 'b0;
assign rst_timer = (st == S_H2L || st == S_L2H ) ? 'b1 : 'b0;

// bit counter
always @(posedge clk)
	begin : cnt_bit_num 
		if((rst == 'b1) || (shift_done == 'b1))
			bit_cnt <= 4'b0;
		else if(reset_bit_cnt == 'b1) 
			bit_cnt <= 4'b0;
		else if(shift == 'b1)
			bit_cnt <= bit_cnt + 'b1;
	end 


// timer_timeout : ps2clk이 정상적으로 동작하는 경우에는 timer_cnt가 S_H2L 또는 S_L2H 상태에서 reset 되기 때문에 timer_timeout이 의미없다.
// 하지만 ps2clk의 오동작에 의해 ps2clk의 상태를 나타내는 state(st)가 제대로 넘어가지 않으면 timer_cnt가 계속 증가한다.
// ps2clk는 최대 33kHZ로 동작하고 일반적으로는 10kHz~20kHZ로 동작하기 때문에 timer_cnt가 120u이상을 센다면 ps2clk가 오동작하고 있음을 의미한다.
// 이 때는 reset_bit_cnt에 의해 bit_cnt가 reset되어 데이터 수신을 취소한다.
assign timer_timeout = (timer_cnt == `TIMER_120U_TERMINAL_VAL) ? 'b1 : 'b0;
assign reset_bit_cnt = (timer_timeout == 'b1 && st == S_H && ps2_clk_s == 'b1) ? 'b1 : 'b0;

// 120 us timer
always @(posedge clk)
	begin : timer 
		if(rst_timer == 'b1)
			timer_cnt <= 'b0;
		else if(timer_timeout == 'b0)
			timer_cnt <= timer_cnt + 'b1;	
	end

// shift register for SIPO operation (11-bit length)
// ps2clk의 falling edge 때마다 ps2data를 한 bit씩 shift하여 q(11bit: start_bit(1), data_bit(8), parity_bit(1), stop_bit(1))에 채워넣는다.
always @(posedge clk)
	begin : shift_R 
		if(rst == 'b1) 
			q <= 'b0;
		else if(shift == 'b1 ) 
			q <= { ps2_data_s, q[`FRAME_BIT_NUM-1 : 1] };
	end

// shift done: 11bit의 데이터를 모두 전송했을 때, shift_done이 한 클락동안 assert 된다.
assign shift_done = (bit_cnt == `FRAME_BIT_NUM) ? 'b1 : 'b0;
// got_release: 키보드를 놓았으면 release code(F0)이 전송된다. 이를 detect하는 신호이다.
assign got_release = (q[8:1] == `RELEASE_CODE) && (shift_done == 'b1) ? 'b1 : 'b0;
assign extended = (q[8:1] == `EXTENDED_CODE) && (shift_done == 'b1) ? 'b1 : 'b0;
// output_strobe: 키보드를 계속 누르고 있는 상태이다. 키보드를 계속 누르고 있으면 주기적으로 ps2clk가 뛰면서 keyboard로부터 데이터를 받아온다.
assign output_strobe = ((shift_done == 'b1) && (got_release == 'b0) && (extended == 'b0)) ? 'b1 : 'b0;

always @(posedge clk)
	begin : latch_released 
		if( rst == 'b1 || output_strobe == 'b1)
			hold_release <= 'b0;
		else if(got_release == 'b1)
			hold_release <= 'b1;
	end
	
always @(posedge clk)
	begin : latch_extended
		if( rst == 'b1 || output_strobe == 'b1)
			hold_extended <= 'b0;
		else if(extended == 'b1)
			hold_extended <= 'b1;
	end

// state register 
// 다음 두 always문은 data ready에 관한 FSM이다. 
// 키보드가 눌리고 데이터를 읽어오면(output_strobe=1) 데이터가 준비되었다고 알려준다.(ready_st)
// ready_st 상태에서 데이터를 읽었다는 read 신호가 들어오면 다시 ready_ack_st로 간다.
always  @(posedge clk)
	begin : comm_state_reg
		if(rst == 'b1) 
			st2 <= `ready_ack_st;
		else
			st2 <= nx_st2;
	end 
	
always @(st2, output_strobe, read)
	begin 
		(* FULL_CASE, PARALLEL_CASE *)
		case (st2) 
			`ready_ack_st : 
				nx_st2 = (output_strobe == 'b1) ? `ready_st : `ready_ack_st;
			`ready_st :
				nx_st2 = (read == 'b1) ?  `ready_ack_st : `ready_st;
			default : 
				nx_st2 = `ready_ack_st;						
		endcase
	end
	
assign data_ready = (st2 == `ready_st) ? 'b1 : 'b0;

	
// latch the output signals (scan code data)
// keyboard에서 각 키에 해당하는 8bit의 데이터를 보내주면 scancode에 각 키에 해당하는 ascii code를 넣어준다.
always @(posedge clk)
	begin : send_output
		if(rst == 'b1) 
			begin
				scancode = 'b0;
				shift_flag = 'b0;
				released = 'b1;
				err_ind = 'b0;
			end 
		else if(output_strobe == 'b1) // keyborad가 눌려있음
			begin
				scancode = q[8:1];
				released = hold_release;
				err_ind = err;
				if(shift_flag == 'b1) // shift + key
					begin
						valid = 'b1;
						case (q[8:1])
							'h1C : scancode = 'h41; // A
							'h32 : scancode = 'h42; // B
							'h21 : scancode = 'h43; // C
							'h23 : scancode = 'h44; // D
							'h24 : scancode = 'h45; // E
							'h2B : scancode = 'h46; // F
							'h34 : scancode = 'h47; // G
							'h33 : scancode = 'h48; // H
							'h43 : scancode = 'h49; // I
							'h3B : scancode = 'h4A; // J
							'h42 : scancode = 'h4B; // K
							'h4B : scancode = 'h4C; // L
							'h3A : scancode = 'h4D; // M
							'h31 : scancode = 'h4E; // N
							'h44 : scancode = 'h4F; // O
							'h4D : scancode = 'h50; // P
							'h15 : scancode = 'h51; // Q
							'h2D : scancode = 'h52; // R
							'h1B : scancode = 'h53; // S
							'h2C : scancode = 'h54; // T
							'h3C : scancode = 'h55; // U
							'h2A : scancode = 'h56; // V
							'h1D : scancode = 'h57; // W
							'h22 : scancode = 'h58; // X
							'h35 : scancode = 'h59; // Y
							'h1A : scancode = 'h5A; // Z
							
							'h16 : scancode = 'h21; // !
							'h1E : scancode = 'h40; // @
							'h26 : scancode = 'h23; // #
							'h25 : scancode = 'h24; // $
							'h2E : scancode = 'h25; // %
							'h36 : scancode = 'h5E; // ^
							'h3D : scancode = 'h26; // &
							'h3E : scancode = 'h2A; // *
							'h46 : scancode = 'h28; // (
							'h45 : scancode = 'h29; // )
							
							'h0E : scancode = 'h7E; // ~
							'h4E : scancode = 'h5F; // _
							'h55 : scancode = 'h2B; // +
							'h5D : scancode = 'h7C; // |
							'h54 : scancode = 'h7B; // {
							'h5B : scancode = 'h7D; // }
							'h4C : scancode = 'h7A; // :
							'h52 : scancode = 'h22; // "
							'h41 : scancode = 'h3C; // <
							'h49 : scancode = 'h3E; // >
							'h4A : scancode = 'h3F; // ?
							default : 
								begin
									scancode = scancode;
									valid = 'b0;
								end
						endcase
									
						if(hold_release == 'b1) // keyboard에서 손을 뗄 때, shift가 눌려있다면 scancode를 바꾸지 않는다.
							begin
								valid = 'b1;
								case (q[8:1])
									'h12 :
										begin
											shift_flag = 'b0;
											scancode = scancode; 
										end											
									'h59 : 
										begin
											shift_flag = 'b0;
											scancode = scancode;
										end
									default : 
										begin
											scancode = scancode;
											valid = 'b0;
										end
								endcase
							end
					end
				
				/* shift flag == 0 */			
				else if (hold_extended == 'b1)
					begin
						valid = 'b1;
						case (q[8:1])
							'h74 : scancode = 'h90; // right arrow
							'h6B : scancode = 'h91; // left arrow
							'h75 : scancode = 'h92; // up arrow
							'h72 : scancode = 'h93; // down arrow
							
							'h70 : scancode = 'h84; // ins
							'h71 : scancode = 'h85; // del
							'h6C : scancode = 'h86; // home
							'h69 : scancode = 'h87; // end
							'h7D : scancode = 'h88; // page up
							'h7A : scancode = 'h89; // page down
							
							'h4A : scancode = 'h2F; // /
							'h14 : scancode = 'h80; // r_control
							'h11 : scancode = 'h81; // r_alt
							'h5A : scancode = 'h0D; // num_pad ENTER
							
							'h12 : scancode = 'h8A; // print screen
							default : 
								begin
									scancode = scancode;
									valid = 'b0;
								end
						endcase
					end
							
				else
					begin
						valid = 'b1;
						case (q[8:1])
							'h1C : scancode = 'h61; // a
							'h32 : scancode = 'h62; // b
							'h21 : scancode = 'h63; // c
							'h23 : scancode = 'h64; // d
							'h24 : scancode = 'h65; // e
							'h2B : scancode = 'h66; // f
							'h34 : scancode = 'h67; // g
							'h33 : scancode = 'h68; // h
							'h43 : scancode = 'h69; // i
							'h3B : scancode = 'h6A; // j
							'h42 : scancode = 'h6B; // k
							'h4B : scancode = 'h6C; // l
							'h3A : scancode = 'h6D; // m
							'h31 : scancode = 'h6E; // n
							'h44 : scancode = 'h6F; // o
							'h4D : scancode = 'h70; // p
							'h15 : scancode = 'h71; // q
							'h2D : scancode = 'h72; // r
							'h1B : scancode = 'h73; // s
							'h2C : scancode = 'h74; // t
							'h3C : scancode = 'h75; // u
							'h2A : scancode = 'h76; // v
							'h1D : scancode = 'h77; // w
							'h22 : scancode = 'h78; // x
							'h35 : scancode = 'h79; // y
							'h1A : scancode = 'h7A; // z
							
							'h16 : scancode = 'h31; // 1
							'h1E : scancode = 'h32; // 2
							'h26 : scancode = 'h33; // 3
							'h25 : scancode = 'h34; // 4
							'h2E : scancode = 'h35; // 5
							'h36 : scancode = 'h36; // 6
							'h3D : scancode = 'h37; // 7
							'h3E : scancode = 'h38; // 8
							'h46 : scancode = 'h39; // 9
							'h45 : scancode = 'h30; // 0
							
							'h69 : scancode = 'h31; // 1
							'h72 : scancode = 'h32; // 2
							'h7A : scancode = 'h33; // 3
							'h6B : scancode = 'h34; // 4
							'h73 : scancode = 'h35; // 5
							'h74 : scancode = 'h36; // 6
							'h6C : scancode = 'h37; // 7
							'h75 : scancode = 'h38; // 8
							'h7D : scancode = 'h39; // 9
							'h70 : scancode = 'h30; // 0
							
							'h76 : scancode = 'h1B; // ESC
							'h0E : scancode = 'h60; // `
							'h4E : scancode = 'h2D; // -
							'h55 : scancode = 'h3D; // =
							'h5D : scancode = 'h5C; // \
							'h66 : scancode = 'h08; // BACKSPACE
							'h0D : scancode = 'h09; // TAB
							'h5A : scancode = 'h0D; // ENTER
							'h54 : scancode = 'h5B; // [
							'h5B : scancode = 'h5D; // ]
							'h4C : scancode = 'h3B; // ;
							'h52 : scancode = 'h27; // '
							'h41 : scancode = 'h2C; // ,
							'h49 : scancode = 'h2E; // .
							'h4A : scancode = 'h2F; // /
							'h29 : scancode = 'h20; // SPACE
							
							'h14 : scancode = 'h80; // control
							'h11 : scancode = 'h81; // alt
							'h77 : scancode = 'h82; // Num Lock
							'h58 : scancode = 'h83; // Caps
							'h7E : scancode = 'h8B; // scroll lock
							
							// sign in numer pad on right side
							'h71 : scancode = 'h2E; // .
							'h79 : scancode = 'h2B; // +
							'h7C : scancode = 'h2A; // *
							'h7B : scancode = 'h2D; // -
							'hE1 : scancode = 'h8C; // puase/break
							'h12 :						 // shift_on
								begin
									scancode = scancode;
									shift_flag = 'b1;
								end 
							'h59 :						 // shift_on 
								begin
									scancode = scancode;
									shift_flag = 'b1;
								end 
							default : 
								begin
									scancode = scancode;
									valid = 'b0;
								end
						endcase
					end				
			end
		else
			begin
				scancode = scancode;
				err_ind = err_ind;
				released = released;
			end
	end
	
// error cheking part
// keyboard로 부터 전송받은 11bit의 데이터에 error가 있는지를 체크하는 부분
// parity_err(odd parity): keyboard에서는 odd_parity check를 할수 있게 11bit중 1의 개수가 홀수개가 되도록 parity bit을 설정해준다.
// 이때, 전송된 11bit의 데이터에 홀수개의 1이 있으면 error가 없다고 판단한다.
// ss_bits_err: start bit이 '0'인지 stop bitdl '1'인지 check한다.
always @(q)
	begin : err_chk 
		p = q[0] ^ q[1] ^ q[2] ^ q[3] ^ q[4] ^ q[5] ^ q[6] ^ q[7] ^ q[8] ^ q[9] ^ q[10];	
		parity_err = ( p == 'b1) ? 1'b0 : 1'b1;
		ss_bits_err = ( q[0] == 'b1 || q[10] == 'b0) ? 1'b1 : 1'b0;
	end
	
assign err = parity_err || ss_bits_err;



always @(posedge got_release)begin
    if(keycode[7:0] == 'h08)
        keycode[31:0] <= {16'b0000_0000_0000_0000, keycode[31:16]};
    else
        keycode[31:24]<=keycode[23:16];
        keycode[23:16]<=keycode[15:8];
        keycode[15:8]<=keycode[7:0];
        keycode[7:0]<=scancode;
   
    
end


endmodule
//////////////////////////////////////////////////////////////


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date:    15:55:16 01/16/2011 
// Design Name: 
// Module Name:    debounce_pulse 
// Project Name: 
// Target Devices: 
// Tool versions: 
// Description: 
//
// Dependencies: 
//
// Revision: 
// Revision 0.01 - File Created
// Additional Comments: 
//
//////////////////////////////////////////////////////////////////////////////////
module debounce_pulse(
    input wire clk,
    input wire rst,
    input wire Din,
    output wire Dout
    );
	 wire A;
	 reg B,C;
	 integer cnt;
	 
	 assign A = Din;
	 
	 always @(posedge clk)
		if(rst==1) begin
			B <= 0;
			C <= 0;
		end
		else begin
			B <= A;
			C <= B;
		end
		
		assign Dout = (~C & B);



endmodule
////////////////////////////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps

module ss_drive(
    input wire clk,
    input wire rst,
    input wire [3:0] data7,
    input [3:0] data6,
    input [3:0] data5,
    input [3:0] data4,
    input [3:0] data3,
    input [3:0] data2,
    input [3:0] data1,
    input [3:0] data0,
	input [7:0] mask,
    output ssA,
    output ssB,
    output ssC,
    output ssD,
    output ssE,
    output ssF,
    output ssG,
    output ssDP,
    output reg AN7,
    output reg AN6,
    output reg AN5,
    output reg AN4,
    output reg AN3,
    output reg AN2,
    output reg AN1,
    output reg AN0
    );
    
	 
	
	reg [2:0] sel;
	reg [3:0] data;
	integer cnt;
	
    
	always @(posedge clk)
		if(rst)
			begin
			cnt <= 0;
			sel <= 3'b000;
			end
		else if (cnt < 20000) //100MEGHz / 20000 = 5KHz = 1/ (0,2ms). 0.2ms * 8 = 1.6ms
			begin
			cnt <= cnt + 1;
			sel <= sel;
			end
		else 
			begin
			cnt <= 0;
			sel <= sel + 1;
			end

	always @(data7,data6,data5,data4,data3, data2, data1, data0, sel, mask)
		case(sel)
			3'b000 : begin
				data = data0;
				AN7 = 1;
                AN6 = 1;
                AN5 = 1;
                AN4 = 1;
				AN3 = 1;
				AN2 = 1;
				AN1 = 1;
				AN0 = 0 | (~mask[0]);
				end
			3'b001 : begin
                data = data1;
                AN7 = 1;
                AN6 = 1;
                AN5 = 1;
                AN4 = 1;
                AN3 = 1;
                AN2 = 1;
                AN1 = 0 | (~mask[1]);
                AN0 = 1;
                end
            3'b010 : begin
                data = data2;
                AN7 = 1;
                AN6 = 1;
                AN5 = 1;
                AN4 = 1;
                AN3 = 1;
                AN2 = 0 | (~mask[2]);
                AN1 = 1;
                AN0 = 1;
                end                				
			3'b011 : begin
                data = data3;
                AN7 = 1;
                AN6 = 1;
                AN5 = 1;
                AN4 = 1;
                AN3 = 0 | (~mask[3]);
                AN2 = 1;
                AN1 = 1;
                AN0 = 1;
                end      
        	3'b100 : begin
                data = data4;
                AN7 = 1;
                AN6 = 1;
                AN5 = 1;
                AN4 = 0 | (~mask[4]);
                AN3 = 1;
                AN2 = 1;
                AN1 = 1;
                AN0 = 1;
                end   
           3'b101 : begin
                data = data5;
                AN7 = 1;
                AN6 = 1;
                AN5 = 0 | (~mask[5]);
                AN4 = 1;
                AN3 = 1;
                AN2 = 1;
                AN1 = 1;
                AN0 = 1;
                end
           3'b110 : begin
                data <= data6;
                AN7 = 1;
                AN6 = 0 | (~mask[6]);
                AN5 = 1;
                AN4 = 1;
                AN3 = 1;
                AN2 = 1;
                AN1 = 1;
                AN0 = 1;
                end   
                
          default : begin//3'b111
               data = data7;
               AN7 = 0 | (~mask[7]);
               AN6 = 1;
               AN5 = 1;
               AN4 = 1;
               AN3 = 1;
               AN2 = 1;
               AN1 = 1;
               AN0 = 1;
               end 
                                            
		
		endcase
	
	ss_decoder data_decode (
    .Din(data), 
    .a(ssA), 
    .b(ssB), 
    .c(ssC), 
    .d(ssD), 
    .e(ssE), 
    .f(ssF), 
    .g(ssG), 
    .dp(ssDP)
    );

		


endmodule
//////////////////////////////////////////////////////////////////////////////
`timescale 1ns / 1ps

module ss_decoder(
    input [3:0] Din,
    output reg a,
    output reg b,
    output reg c,
    output reg d,
    output reg e,
    output reg f,
    output reg g,
    output reg dp
    );
	 // Combinational assignments는 blocking으로 하는것이 맞다.
	 always @(Din)
	 case(Din)
		4'b0000 : begin//0
			a = 0;
			b = 0;
			c = 0;
			d = 0;
			e = 0;
			f = 0;
			g = 1;
			dp = 1;
			end
		4'b0001 : begin//1
			a = 1;
			b = 0;
			c = 0;
			d = 1;
			e = 1;
			f = 1;
			g = 1;
			dp = 1;
			end
		4'b0010 : begin//2
			a = 0;
			b = 0;
			c = 1;
			d = 0;
			e = 0;
			f = 1;
			g = 0;
			dp = 1;
			end
		4'b0011 : begin//3
			a = 0;
			b = 0;
			c = 0;
			d = 0;
			e = 1;
			f = 1;
			g = 0;
			dp = 1;
			end
		4'b0100 : begin//4
			a = 1;
			b = 0;
			c = 0;
			d = 1;
			e = 1;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b0101 : begin//5
			a = 0;
			b = 1;
			c = 0;
			d = 0;
			e = 1;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b0110 : begin//6
			a = 0;
			b = 1;
			c = 0;
			d = 0;
			e = 0;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b0111 : begin//7
			a = 0;
			b = 0;
			c = 0;
			d = 1;
			e = 1;
			f = 0;
			g = 1;
			dp = 1;
			end
		4'b1000 : begin//8
			a = 0;
			b = 0;
			c = 0;
			d = 0;
			e = 0;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b1001 : begin//9
			a = 0;
			b = 0;
			c = 0;
			d = 0;
			e = 1;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b1010 : begin//a
			a = 0;
			b = 0;
			c = 0;
			d = 0;
			e = 0;
			f = 1;
			g = 0;
			dp = 1;
			end
		4'b1011 : begin//b
			a = 1;
			b = 1;
			c = 0;
			d = 0;
			e = 0;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b1100 : begin//c
			a = 0;
			b = 1;
			c = 1;
			d = 0;
			e = 0;
			f = 0;
			g = 1;
			dp = 1;
			end
		4'b1101 : begin//d
			a = 1;
			b = 0;
			c = 0;
			d = 0;
			e = 0;
			f = 1;
			g = 0;
			dp = 1;
			end
		4'b1110 : begin//e
			a = 0;
			b = 1;
			c = 1;
			d = 0;
			e = 0;
			f = 0;
			g = 0;
			dp = 1;
			end
		4'b1111 : begin//f
			a = 0;
			b = 1;
			c = 1;
			d = 1;
			e = 0;
			f = 0;
			g = 0;
			dp = 1;
			end
		
		endcase
			

endmodule

